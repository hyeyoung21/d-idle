# build-and-push.yml 최종 수정본

name: Build and Push

permissions:
  id-token: write
  deployments: write
  contents: write # commit step 제거 시 필요 없을 수 있음
  statuses: write
  actions: write
  checks: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'build and push'
        required: true
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  WEB_ECR: didle-web # 실제 ECR 리포지토리 이름과 일치 확인
  WAS_ECR: didle-was # 실제 ECR 리포지토리 이름과 일치 확인

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout merged code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/didle-cicd-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Apache image
        id: build_apache # 스텝 ID 부여 (참조 시 필요할 수 있음)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # github.sha 는 항상 최신 커밋 해시를 사용
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # web_static 폴더가 checkout된 루트에 있는지 확인!
          docker build -t $ECR_REGISTRY/$WEB_ECR:$IMAGE_TAG ./web_static # 컨텍스트 경로 명시
          docker push $ECR_REGISTRY/$WEB_ECR:$IMAGE_TAG
          echo "apache_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT # 출력 변수 설정

      - name: Build with Gradle
        env:
          # Gradle 빌드 시 필요한 AWS 자격 증명 (CI Runner에 이미 설정되어 있음)
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS_REGION: ${{ env.AWS_REGION }}
          # BUCKET_NAME: ${{ env.BUCKET_NAME }} # 빌드 시 필요하다면 deploy env 사용
          BUCKET_NAME: ${{ secrets.BUCKET_NAME || env.BUCKET_NAME }} # secret 우선 사용
        run: |
          # backend/didle/didle 경로 확인!
          cd backend/didle/didle
          chmod +x ./gradlew
          ./gradlew build # 환경 변수로 전달되거나 application.properties 사용 권장

      - name: Build, tag, and push image to Amazon ECR (WAS)
        id: build_was # 스텝 ID 부여
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # backend/didle/didle 경로 확인!
          docker build -t $ECR_REGISTRY/$WAS_ECR:$IMAGE_TAG ./backend/didle/didle # 컨텍스트 경로 명시
          docker push $ECR_REGISTRY/$WAS_ECR:$IMAGE_TAG
          echo "was_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT # 출력 변수 설정
