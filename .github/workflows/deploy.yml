name: Deploy

permissions:
  id-token: write
  deployments: write
  contents: write

on:
  workflow_run:
    workflows: ["Build and Push"]
    types:
      - completed

  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string

env:
  AWS_REGION: us-east-2
  EKS_CLUSTER: didle-eks-cluster
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  ARGOCD_USERNAME: admin
  ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
  HELM_CHART_PATH: ./helm-charts/didle
  BUCKET_NAME: didle-service-data

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract image tags from values.yaml
        run: |
          # Apache 태그 추출 및 저장
          APACHE_IMAGE_TAG=$(grep -A3 '^apache:' ${{ env.HELM_CHART_PATH }}/values.yaml | grep 'tag:' | head -n 1 | awk '{print $2}')
          echo "Extracted APACHE_IMAGE_TAG: $APACHE_IMAGE_TAG"
          echo "APACHE_IMAGE_TAG=$APACHE_IMAGE_TAG" >> $GITHUB_ENV

          # WAS (기본 image) 태그 추출 및 저장
          WAS_IMAGE_TAG=$(grep 'tag:' ${{ env.HELM_CHART_PATH }}/values.yaml | sed -n '2p' | awk '{print $2}')
          echo "Extracted WAS_IMAGE_TAG: $WAS_IMAGE_TAG"
          echo "WAS_IMAGE_TAG=$WAS_IMAGE_TAG" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/didle-cicd-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Login to ArgoCD
        run: |
          argocd login ${{ env.ARGOCD_SERVER }} --username ${{ env.ARGOCD_USERNAME }} --password ${{ env.ARGOCD_PASSWORD }} --insecure

      - name: Create ArgoCD Application (if not exists)
        run: |
          if ! argocd app get didle-app --server ${{ env.ARGOCD_SERVER }}; then
            argocd app create didle-app \
              --repo https://github.com/D-idle/d-idle.git \
              --path ./helm-charts/didle \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace default \
              --server ${{ env.ARGOCD_SERVER }}
          fi

      - name: Set image tags and sync ArgoCD application
        run: |
          # 환경 변수가 제대로 설정되었는지 확인 (디버깅용)
          echo "Using Apache Tag: ${{ env.APACHE_IMAGE_TAG }}"
          echo "Using WAS Tag: ${{ env.WAS_IMAGE_TAG }}"

          argocd app set didle-app \
            --parameter aws.accessKey=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --parameter aws.secretKey=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --parameter aws.region=${{ env.AWS_REGION }} \
            --parameter aws.bucketName=${{ env.BUCKET_NAME }} \
            --parameter image.tag=${{ env.WAS_IMAGE_TAG }} \         # <-- parameter 사용
            --parameter apache.image.tag=${{ env.APACHE_IMAGE_TAG }} \ # <-- parameter 사용
            --server ${{ secrets.ARGOCD_SERVER }}

          # 에러 발생 시 sync 명령어가 실행되지 않도록 set 명령어 성공 여부 확인 (선택 사항이지만 권장)
          if [ $? -eq 0 ]; then
            echo "argocd app set successful. Syncing application..."
            argocd app sync didle-app --prune --server ${{ secrets.ARGOCD_SERVER }}
          else
            echo "Error: argocd app set failed!"
            exit 1
          fi


